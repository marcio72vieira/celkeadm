Baixando projetos do GIT

1 - Ir para a pasta onde estão seus projetos
    1.1 - cd projetos
    1.2 - git init
    1.3 - Digitar o comando: 
          git config http.sslVerify "false"   ou  git config http.sslVerify false (para um repo específico)
          ou
          git config --global http.sslVerify false (para todos os repositórios)
       

2 - Clonar o repositório desejado do git
    2.1 - git clone https://marciovieira@gitlab.seati.ma.gov.br/erick.pessoa/central-servico-viva.git

2 - Clonar o repositório de uma branch específica
    2.2 - git clone https://marciovieira@gitlab.seati.ma.gov.br/erick.pessoa/central-servico-viva.git -b develop

3 - Entrar na pasta central-servico-viva
    3.1 - cd central-servico-viva

4 - Dá a sequência de comandos abaixo dentro da pasta central-serviço-viva:
    4.1 - git branch develop
    4.2 - git checkout develop
    4.3 - git pull origin develop
          4.3.1 - Entre com sua senha

5 - Depois de baixado o projeto, dê o comando abaixo (dentro da pastga sistemas)
    5.1 - Composer update

6 - Renomear o arquivo: .env.exemple para .env

7 - Gerar uma chave com o comando: php artisan key:generate

8 - Criar o banco de dados no postgress (nome do banco em questão: viva)

9 - Configurar o banco de dados, conforme abaixo:
    DB_CONNECTION=pgsql
    DB_HOST=127.0.0.1
    DB_PORT=5432
    DB_DATABASE=viva
    DB_USERNAME=postgres
    DB_PASSWORD=postgres123

10 - Digitar o comando: php artisan migrate

11 - Digitar php artisan db:seed


12 - Após fazer o clone do repositório do gitlab, to tipo: 
     sudo git clone https://marciovieira@gitlab.seati.ma.gov.br/erick.pessoa/sisconsigno.git
     Após instalar o composer 
     sudo apt-get install composer
     Vá para a pasta do proejto clonado, no caso: projetos/sisconsignot/laravel e execute o comando abaixo, para baixar todas as dependências necessárias ao proejeto.
     composer install

13 - Alterando o a senha do postgress no ubuntu  (link: https://www.vivaolinux.com.br/dica/Alterando-senha-inicial-do-PostgreSQL-[Ubuntu])
	marcio@marcio72:~$ sudo passwd postgres
	[sudo] senha para marcio: 
	Digite a nova senha UNIX: 
	Redigite a nova senha UNIX: 
	passwd: senha atualizada com sucesso
	marcio@marcio72:~$ su postgres
	Senha: 
	postgres@marcio72:/home/marcio$ psql -c "ALTER USER postgres WITH PASSWORD 'postgres123'" -d template1
	ALTER ROLE
	postgres@marcio72:/home/marcio$ 



*********************
*     FASE UM       *
*********************
001 - Instalar o composer Globalmente ou em uma pasta de projeto específica

002 - Depois de instalar o COMPOSER, reinicie a máquia e se não reiniciar a máquina, utilize outra JANELA DE TERMINAL

003 - Criar a seguinte estrutura de pastas na pasta de seu projeto a partir da raiz do seu projeto
	app\
	app\sts
	app\sts\Controllers
	app\sts\Models
	app\sts\Views
	

003 - Em sua pasta de projeto, crie um arquivo composer.json na raiz do seu projeto

004 - No arquivo composer.json coloque o seguinte conteúdo e salve
	{
	    "description": "Marcio Vieira -  Projeto PHP OO (Celke)",
	    "authors": [
		{
		    "name": "Marcio Vieira",
		    "email": "marcio72vieira@hotmail.com"
		}
	    ],
	    "autoload": {
		"psr-4": {
		    "Sts\\": "app/sts"
		}
	    }

	}
	OBS: "Sts\\" é um apelido para acessar a pasta "app/sts"

005 - Após salvar o arquivo composer.json, execute o seguinte comando na raiz da pasta do seu projeto
	composer update
	
006 - Será criado uma nova pasta "vendor" na pasta raiz do seu projeto e um arquivo composer.lock

007 - Na pasta "vendor" há uma pasta "composer" e um arquivo "autoload.php"

008 - Verifique o conteúdo do arquivo: "vendor/composer/autoload_psr4.php", ele deverá possuir o seguinte conteúdo:
	<?php

	// autoload_psr4.php @generated by Composer

	$vendorDir = dirname(dirname(__FILE__));
	$baseDir = dirname($vendorDir);

	return array(
	    'Sts\\' => array($baseDir . '/app/sts'),
	); 

009 - Crie uma pasta na raiz do projeto chamada: "core" (core, será o "coração do nosso projeto". Importante, crie a pasta "core", no mesmo nível da pasta "app")

010 - Altere o arquivo composer.json, dá raiz do projeto conforme abaixo:
	{
	    "description": "Marcio Vieira -  Projeto PHP OO (Celke)",
	    "authors": [
		{
		    "name": "Marcio Vieira",
		    "email": "marcio72vieira@hotmail.com"
		}
	    ],
	    "autoload": {
		"psr-4": {
		    "Sts\\": "app/sts",
		    "Core\\": "core"
		}
	    },
	    "require": {}
	}

011 - Acrescente a nova pasta "core" e seu apelido "Core" ao arquivo vendor\composer\autoload_psr4.php através do comando abaixo
	composer dumpautoload

012 - O arquivo vendor/composer/autoload_psr4.php deverá está como segue:
	<?php

	// autoload_psr4.php @generated by Composer

	$vendorDir = dirname(dirname(__FILE__));
	$baseDir = dirname($vendorDir);

	return array(
	    'Sts\\' => array($baseDir . '/app/sts'),
	    'Core\\' => array($baseDir . '/core'),
	);


*********************
*     FASE DOIS     *
*********************
013 - Crie um arquivo index.php, que será responsável por invocar o "composer", que será responsável por carregar todas as classes, com o seguinte conteúdo:
	<!DOCTYPE html>
	<html lang="pt-br">
	<head>
	    <meta charset="UTF-8">
	    <meta name="viewport" content="width=device-width, initial-scale=1.0">
	    <title>MRCTech</title>
	</head>
	<body>
	    <?php
		require './vendor/autoload.php';
	    ?>
	</body>
	</html>

014 - Crie a classe ConfigController.php (responsável por carregar nosso projeto) na pasta "core",  com o conteúdo abaixo: Não esquecer de definir o namespace
	<?php
	namespace Core;

	class ConfigController
	{
	    public function __construct()
	    {
		echo "Core carregado...";
	    }
	}


015 - Crie um objeto com a classe ConfigCOntroller no arquivo index.php para verificar a correta execução do autoload, alterando o arquivo index.php como segue:
	<!DOCTYPE html>
	<html lang="pt-br">
	<head>
	    <meta charset="UTF-8">
	    <meta name="viewport" content="width=device-width, initial-scale=1.0">
	    <title>MRCTech</title>
	</head>
	<body>
	    <?php
		require './vendor/autoload.php';

		$url = new Core\ConfigController();
		
	    ?>
	</body>
	</html>

016 - Carregue a página a partir de sua pasta raiz comm o comando abaixo, para verificar sua correta execução:
	marcio@vaio:~/projetosphp/pasta_do_projeto$ php -S localhost:8000

017 - Deverá ser exibido a saida abaixo, indicando que está tudo certo
	Core carregado... 

018 - Se desejar um "apelido" para a classe, modifique o arquivo index.php da raiz do proejeto com segue e execute novamente com php -S localhost:8000 na sua pasta de projeto
	<!DOCTYPE html>
	<html lang="pt-br">
	<head>
	    <meta charset="UTF-8">
	    <meta name="viewport" content="width=device-width, initial-scale=1.0">
	    <title>MRCTech</title>
	</head>
	<body>
	    <?php
		require './vendor/autoload.php';
		use Core\ConfigController as Home;          // Definindo um apelido

		$url = new Home();                          // Criando objeto utilizando o apelido criado 
		
	    ?>
	</body>
	</html>

019 - Crie um arquivo .htaccess na raiz do projeto com o seguinte conteúdo
	RewriteEngine On

	RewriteCond %{REQUEST_FILENAME} !-d
	RewriteCond %{REQUEST_FILENAME} !-f
	RewriteCond %{REQUEST_FILENAME} !-l

	RewriteRule ^(.+)$ index.php/?url=$1 [QSA,L]
	

020 - Os namespaces no início de cada classe, serve para estas classes sejam instanciadas em outras classes, ou seja, criando novos objetos; Invocando métodos e tudo o mais...

021 - Dentro de app/sts/Models inserir o arquivo de conexao.php para que todos os Models desta pasta "herdem" a conexão. Lembrando de definir o namespace Sts\Models no início















****************************************************
*  MINHA SOLUÇÃO PARA RESOLVER O PROBLEMA DA URL   *
****************************************************

 class ConfigController
    {
        private string $url;
        private array $urlConjunto;
        private string $urlController;
        private string $urlParametro;
        private array $format;
        private string $urlslugController;


        public function __construct(){
            if($this->url = filter_input(INPUT_GET, "url", FILTER_DEFAULT) == null){
                echo "URL não veio!";
            }else{
                $this->url = filter_input(INPUT_GET, "url", FILTER_DEFAULT);
                echo "A URL é: {$this->url}";
            }





****************************************************
*     FAZENDO O .htaccess SER CARREGADO            *
****************************************************
REFERÊNCIAS:
	https://digitalfortress.tech/bugfix/fix-htaccess-not-being-read/
	https://askubuntu.com/questions/421233/enabling-htaccess-file-to-rewrite-path-not-working
	https://askubuntu.com/questions/86631/htaccess-file-ignored-on-ubuntu-server
	
	Em: /etc/apache2/apache2.conf
		Digitar: sudo nano apache2.conf
		
		Mudar este trecho:
		<Directory /var/www/>
		    Options Indexes FollowSymLinks
		    AllowOverride None
		    Require all granted
		</Directory>

		Para este, ou seja, acrescentar /html
		<Directory /var/www/html>
			Options Indexes FollowSymLinks
			AllowOverride All
			Require all granted
		</Directory>
		
		Depois teclar: CTRL + O
			       CTRL + X

		No prompt de comando digitar a sequência de comandos:
		sudo a2enmod rewrite
		sudo service apache2 restart
		sudo systemctl restart apache2
	

****************************************************
*     VERIFICAR ERRO DE LOG NO PHP                 *
****************************************************
/var/log/apache2$ tail error.log

****************************************************
*     CRIAR HOST VIRTUAL A PARTIR DE var/www/html  *
****************************************************
/etc/apache2/sites-available$ sudo nano limesurvey.conf  

<VirtualHost *:80>
     ServerAdmin limeteste.com
     DocumentRoot /var/www/html/limesurvey
     ServerName limeteste.com

     <Directory /var/www/html/limesurvey>
          Options FollowSymlinks
          AllowOverride All
          Require all granted
     </Directory>

     ErrorLog ${APACHE_LOG_DIR}/limeteste.com_error.log
     CustomLog ${APACHE_LOG_DIR}/limeteste.com_access.log combined

</VirtualHost>




FLUXO DE EXECUÇÃO DO SISTEMA

01 -    São definidas no arquivo \Core\Config.php as constantes URL, URLADM, CONTROLLER e METODO
02 -    Quando o usuário requisitar a página, deverá digitar na barra de url do navegador: http://localhost/celke/adm/, ou seja
        o valor da constante URLADM.
03 -    Neste momento, o arquivo que será executado será o arquivo index.php que possui no seu script, o carregamento do autoload
        do composer (para carregar as classes quando necessárias) e instancia uma classe ConfigControlle através do "apelido"
        Home (\Core\ConfigController as Home)
04 -    Na mesma pasta raiz (root), há um arquivo .htaccess que define uma variável $url para ser lida pela classe
        ConfigController instanciada no momento em que o usuário acessa http://localhost/celke/adm/
05 -    Se nada for digitada na url do navegador, apenas a url: http://localhost/celke/adm/, a classe ConfigController irá
        definir em seu __constructor o Controller (CONTROLLER), Método(METODO) e Parâmetro Padrão para que uma classe seja
        carregada, ou seja, o CONTROLLER e METODO padroes definidos na classe \Core\Config.php são "Login" e "Access"
06 -    Após a definição do Controller e Método, é invocado o método carregar da classe ConfigController. Este fluxo será
        executado por todas as classe do sistema, ou seja, informando ou não o Controller, Método e Parâmetro que se deseja.



INSTALANDO O JQUERY DIRETAMENTE EM NOSSO PROJETO
01 -    Entrar no site do Jquery: https://jquery.com/
02 -    Clicar no link/botão  "Download Jquery 3.6.0", localizado no cabeçalh da página
03 -    Clicra na opção: "Download the compressed, production jQuery 3.6.0" ou 
        "Download the uncompressed, development jQuery 3.6.0" conforme a necessidade
04 -    Será exibida uma página com todo o código do Jquery, selecione tudo e copie para área de transferência
04 -    Crie uma pasta: adm/app/adms/assets
05 -    Crie outra uma pasta: adm/app/adms/assets/js
06 -    Crie o arquivo jquery.360 na pasta adm/app/adms/assets/js e COLE o conteúdo da "área de transferência" nele e salve-o
07 -    Invoque o arquivo jquery.360 a partir da página "footer.php", (adm/app/adms/Views/include/footer.php) 
        logo acima da tab </body>

INSTALANDO O JQUERY A PARTIR DE UMA CDN
01 -    Entrar no site do Jquery: https://jquery.com/
02 -    Clicar no link/botão  "Download Jquery 3.6.0", localizado no cabeçalh da página
03 -    Escolher o título: Other CDNs
04 -    Clique no link: Google CDN
05 -    Copie o link: <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
06 -    Colo o link copiado no arquivo: adm/app/adms/Views/include/footer.php logo acima da tab </body>
07 -    Acesse a página da aplicação, veja o código fonte da página e click no link que carrega o JQUERY e veja
        se o link exibe todo o script do jquery
    
